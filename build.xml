<?xml version="1.0" encoding="UTF-8"?>
<project name="dtbook-preptools" default="deploy">
<!-- NOTE: project name is used in properties viewid and toolbarid which need to correspond to the constants in Ids.java! -->
	
	<!-- used by "send": properties "recipient" and "greet" -->
	<property file="build.properties" />

	<!-- used by "deploy", "plugin.xml", "clean" -->
	<property name="pluginfile" value="plugin.xml" />

	<!-- used by "stamp", "jar", "clean" -->
	<property name="stamp.properties" value="stamp.properties" />

	<!-- used by "dist", "jar", "plugin.xml", "clean" -->
	<property name="jarfile" value="${ant.project.name}.jar" />

	<!-- used by "compile", "jar", "init", "junit", "clean" -->
	<property name="build.dir" value="bin" />

	<!-- used by "compile" -->
	<property name="src.dir" value="src" />

	<!-- used by "plugin.xml" and "boilerplate" -->
	<property name="header.generated" value="ATTENTION: generated file. Do not edit it, edit the build.xml instead." />

	<!-- used by "boilerplate" -->
	<property name="src.generated" value="generated_src" />

	<!-- used by "junit" -->
	<property name="test.src" value="test_src" />

	<!-- used by "zip", "clean" -->
	<property name="zip.file" value="${ant.project.name}.zip" />

	<!-- used by "plugin.xml" -->
	<property name="description" value="Test" />
	<!-- TODO: possibly the following values can be found from the sources -->
	<property name="package" value="ch.sbs.plugin.preptools" />

	<property name="clazz" value="PrepToolsPlugin" />
	<property name="fqnclazz" value="${package}.${clazz}" />
	<property name="type" value="WorkspaceAccess" />
	<property name="extensionClazz" value="${fqnclazz}Extension" />

	<property name="clazz2" value="PrepToolsValidatorPlugin" />
	<property name="fqnclazz2" value="${package}.${clazz2}" />
	<property name="type2" value="componentsValidator" />
	<property name="extensionClazz2" value="${fqnclazz2}Extension" />
	
	<!-- NOTE: these two ids need to correspond to the constants in Ids.java! -->
	<property name="viewid" value="${ant.project.name}viewid" />
	<property name="toolbarid" value="${ant.project.name}toolbarid" />

	<property name="lib.dir" value="lib" />

	<!-- used by "dist" and "plugin.xml" -->
	<property name="intervaltree.jar" value="org.arabidopsis.interval.jar" />
	<property name="wordhierarchy.jar" value="wordhierarchy.jar" />
	
	<path id="classpath.path">
		<pathelement location="${build.dir}" />
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>

    <presetdef name="my.javac">
        <javac includeantruntime="false" />
    </presetdef>

	<target name="compile" depends="init, boilerplate" description="compile project">
		<my.javac destdir="${build.dir}" deprecation="on" debug="on">
			<src path="${src.dir}" />
			<src path="${src.generated}" />
			<classpath>
				<path refid="classpath.path" />
			</classpath>
		</my.javac>
	</target>

	<target name="deploy" description="install plugin in local oxygen and restart oxygen" >
		<antcall target="stopoxy" />
		<antcall target="dist" />
		<antcall target="startoxy" />
	</target>

	<target name="deploydebug" description="install plugin in local oxygen and restart debuggable oxygen" >
		<antcall target="stopoxy" />
		<antcall target="dist" />
		<antcall target="startoxydebug" />
	</target>

	<target name="deploydebugwait" description="install plugin in local oxygen and restart debuggable oxygen that waits for debugger to connect" >
		<antcall target="stopoxy" />
		<antcall target="dist" />
		<antcall target="startoxydebugwait" />
	</target>

	<target name="dist" depends="jar, plugin.xml, oxygendir" description="install plugin in local oxygen" >
		<property name="plugindir" value="${oxygendir}/plugins/${ant.project.name}" />
		<delete dir="${plugindir}" />
		<mkdir dir="${plugindir}/lib" />
		<copy file="${jarfile}" todir="${plugindir}/lib" />
		<copy file="${lib.dir}/${intervaltree.jar}" todir="${plugindir}/lib" />
		<copy file="${lib.dir}/${wordhierarchy.jar}" todir="${plugindir}/lib" />
		<copy file="${pluginfile}" todir="${plugindir}" />
		<!--
		<copy file="${stamp.properties}" todir="${plugindir}" />
		-->
	</target>
	
	<target name="undist" depends="oxygendir" description="uninstall plugin from local oxygen">
		<property name="plugindir" value="${oxygendir}/plugins/${ant.project.name}" />
		<delete dir="${plugindir}" />
	</target>
	
	<target name="zip" depends="dist" description="makes zip for official distribution">
		<property name="plugindir" value="${oxygendir}/plugins/${ant.project.name}" />
		<zip destfile="${zip.file}" duplicate="fail" basedir="${plugindir}/.." includes="${ant.project.name}/**"/>
	</target>
	
	<target name="send" depends="zip" description="opens thunderbird to send zip">
		<exec executable="pwd" outputproperty="pwd" failifexecutionfails="false" errorproperty="" />
		<exec executable="thunderbird">
			<arg value="-compose"/>
			<arg value="to=${recipient},subject=Neue%20Version%20Preptools:%20${git.revision},attachment=file://${pwd}/${ant.project.name}.zip,body=${greet}%0A%0AVersion:%20${git.revision}%0A%0A"/>
		</exec>
	</target>
	
	<target name="tags" description="Create a TAGS file">
	  <apply executable="etags" parallel="true" osfamily="unix">
	    <fileset dir="${basedir}">
	      <patternset>
		<include name="**/*.java"/>
	      </patternset>
	    </fileset>
	  </apply>
	</target>
	
	<target name="checkCmdlineParTag" unless="git.tag">
		<fail message="git.tag not set. Please provide it with cmd line parameter -Dgit.tag=..."/>
	</target>
	
	<target name="tag" depends="checkCmdlineParTag" description="Tags project with tag given on the commandline with -Dgit.tag=...">
		<exec executable="git">
			<arg value="tag" />
			<arg value="${git.tag}" />
		</exec>
	</target>
	
	<target name="untag" depends="checkCmdlineParTag" description="removes tag given on the commandline with -Dgit.tag=...">
		<exec executable="git">
			<arg value="tag" />
			<arg value="-d" />
			<arg value="${git.tag}" />
		</exec>
	</target>

	<target name="jar" depends="compile, stamp, git.revision"  description="create deployable jar file" >
		<jar destfile="${jarfile}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Build-Time" value="${release.time}" />
				<attribute name="Implementation-Version" value="${repository.version}" />
			</manifest>
			<fileset dir="${build.dir}">
				<exclude name="**/*Test.class"/>
				<exclude name="**/*Tests.class"/>
				<exclude name="**/*TestUtil.class"/>
			</fileset>
			<fileset dir=".">
				<include name="${stamp.properties}" />
			</fileset>
		</jar>
		<echo>
			Built-By: ${user.name}
			Build-Time: ${release.time}
			Implementation-Version: ${repository.version}
			</echo>
	</target>

	<target name="oxygendir"  description="figure out oxygen installation dir" >
		<exec executable="sh" outputproperty="oxygendir">
			<arg value="-c" />
			<arg value="which oxygen|perl -MFile::Basename -ne 'chomp;print dirname readlink'" />
		</exec>
	</target>

	<target name="plugin.xml" depends="stamp, git.revision" description="generate plugin.xml" >
		<echo file="${pluginfile}">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
			&lt;!DOCTYPE plugin SYSTEM "../plugin.dtd"&gt;
			&lt;!-- ${header.generated} --&gt;

			&lt;plugin
					name="${ant.project.name}"
					description="${description}"
					version="${git.revision} (${release.time})"
					vendor="SBS"
					class="${fqnclazz}"&gt;
				&lt;runtime&gt;
					&lt;library name="lib/${jarfile}"/&gt;
					&lt;library name="lib/${intervaltree.jar}"/&gt;
					&lt;library name="lib/${wordhierarchy.jar}"/&gt;
				&lt;/runtime&gt;
			&lt;extension type="${type}" 
				class="${extensionClazz}"/&gt;
			&lt;extension type="${type2}" 
				class="${extensionClazz2}"/&gt;
			
			&lt;view id="${viewid}" initialSide="WEST" initialRow="0"/&gt;
			&lt;toolbar id="${toolbarid}" initialSide="NORTH" initialRow="1"/&gt;

			&lt;/plugin&gt;
		</echo>
	</target>

	<target name="boilerplate" depends="package2dir" description="generate boilerplate classes" >
		<mkdir dir="${src.generated}/${packagedir}" />
		<echo file="${src.generated}/${packagedir}/${clazz}.java">
			// ${header.generated}
			package ${package};

			import ro.sync.exml.plugin.Plugin;
			import ro.sync.exml.plugin.PluginDescriptor;

			public class ${clazz} extends Plugin {

				private static ${clazz} instance = null;

				public ${clazz}(PluginDescriptor descriptor) {
					super(descriptor);

					if (instance != null) {
						throw new IllegalStateException("Already instantiated!");
					}
					instance = this;
				}

				public static ${clazz} getInstance() {
					return instance;
				}
			}
		</echo>

		<echo file="${src.generated}/${packagedir}/${clazz2}.java">
			// ${header.generated}
			package ${package};

			import ro.sync.exml.plugin.Plugin;
			import ro.sync.exml.plugin.PluginDescriptor;

			public class ${clazz2} extends Plugin {

				private static ${clazz2} instance = null;

				public ${clazz2}(PluginDescriptor descriptor) {
					super(descriptor);

					if (instance != null) {
						throw new IllegalStateException("Already instantiated!");
					}
					instance = this;
				}

				public static ${clazz2} getInstance() {
					return instance;
				}
			}
		</echo>

	</target>

	<target name="stamp" depends="git.revision" description="generate file stamp.properties" >
		<tstamp>
			<format property="release.time" pattern="dd.MM.yyyy HH:mm:ss" />
		</tstamp>
		<echo file="${stamp.properties}">
			# ${header.generated}
			stamp = ${repository.version}  (${release.time})
			</echo>
	</target>

	<!-- alternative to do string manip in ant: -->
	<!-- http://ptrthomas.wordpress.com/2007/04/22/how-to-do-string-operations-in-ant/ -->
	<target name="package2dir">
		<exec executable="sh" outputproperty="packagedir">
			<arg value="-c" />
			<arg value="perl -e '$_=&quot;${package}&quot;;tr{.}{/};print $_'" />
		</exec>
	</target>

	<target name="stopoxy" description="stop oxygen" >
		<exec executable="xdotool">
			<arg line="search --onlyvisible --name '&lt;oXygen/&gt; XML Editor' windowactivate --sync key alt+F4" />
		</exec>
		<sleep seconds="1" />
		<!-- http://code.google.com/p/semicomplete/issues/detail?id=45#hc4 -->

		<exec executable="xdotool">
			<arg line="search --onlyvisible --name '^PrepTools' windowactivate key --window 0 Return" />
		</exec>

		<exec executable="xdotool">
			<arg line="search --onlyvisible --name '^Save$' windowactivate key --window 0 alt+n" />
		</exec>

		<exec executable="xdotool">
			<arg line="search --onlyvisible --name '^Modified files' windowactivate key --window 0 alt+n" />
		</exec>
	</target>

	<target name="stopoxyMouse">
		<exec executable="xdotool">
			<arg line="search --onlyvisible --name '&lt;oXygen/&gt; XML Editor' windowactivate --sync key alt+F4" />
		</exec>
		<sleep seconds="1" />
		<exec executable="xdotool">
			<arg line="search --onlyvisible --name '^Save$' windowactivate --sync mousemove --window %1 340 75 click 1" />
		</exec>
	</target>

	<target name="stopoxyOneLinerIsTooFast">
		<exec executable="xdotool">
			<arg line="search --onlyvisible --name '&lt;oXygen/&gt; XML Editor' key alt+F4 search --onlyvisible --name '^Save$' windowactivate --sync mousemove --window %1 340 75 click 1" />
		</exec>
	</target>

	<target name="stopoxy_OnlyWorksIfThereAreNoUnsavedDocs">
		<exec executable="wmctrl">
			<arg value="-c" />
			<arg value="&lt;oxygen/&gt;" />
		</exec>
	</target>

	<target name="startoxy" description="start oxygen" >
		<exec executable="oxygen"/>
	</target>

	<target name="startoxydebug" description="start debuggable oxygen" >
		<exec executable="oxygen">
            <arg value="-J-Xrunjdwp:transport=dt_socket,address=104442,server=y,suspend=n" />
        </exec>
	</target>

	<target name="startoxydebugwait" description="start debuggable oxygen that waits for debugger to connect" >
		<exec executable="notify-send">
            <arg value="notify-send 'oxygen running, waiting for debugger to connect!'" />
        </exec>
		<exec executable="oxygen">
            <arg value="-J-Xrunjdwp:transport=dt_socket,address=104442,server=y,suspend=y" />
        </exec>
	</target>

	<!-- begin git stuff -->
	<available file=".git" type="dir" property="git.present" />
	
	<target name="git.diff">
		<exec executable="git" failifexecutionfails="false" errorproperty="">
			<arg value="diff" />
			<arg value="--quiet" />
		</exec>
	</target>

	<target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
		<!-- observed strange behaviour of git:
			 - If "git describe" is called, often "dirty" is indicated, even though everything is checked in.
			 - This can be fixed by calling "git diff" before.
		 -->
		<antcall target="git.diff"/>
		<exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
			<arg value="describe" />
			<arg value="--tags" />
			<arg value="--always" />
			<arg value="--dirty" />
		</exec>
		<echo>${git.revision}
		</echo>
		<condition property="repository.version" value="${git.revision}" else="unknown">
			<and>
				<isset property="git.revision" />
				<length string="${git.revision}" trim="yes" length="0" when="greater" />
			</and>
		</condition>
	</target>
	<!-- end git stuff -->

    <target name="junit" depends="compile" description="junit">
        <junit printsummary="withOutAndErr" haltonfailure="yes">
            <classpath>
                <fileset dir="lib">
                <include name="**/*.jar"/>
                </fileset>
                <path location="${build.dir}"/>
                <path location="."/>
            </classpath>
            <batchtest fork="yes">
                    <fileset dir="${test.src}">
                            <include name="**/*Test.java"/>
                    </fileset>
            </batchtest>
        </junit>
    </target>

	<target name="clean" description="clean">
		<delete dir="${build.dir}"/>
		<delete file="${zip.file}"/>
		<delete file="${jarfile}"/>
		<delete file="${stamp.properties}"/>
		<delete file="${pluginfile}"/>
	</target>

</project>
